---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app omada
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
    timeout: 5m
  values:
    controllers:
      omada:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          network:
            image:
              repository: alpine
              tag: latest
              pullPolicy: IfNotPresent
            env:
            - name: DEV
              value: eth0
            command:
            - 'sh'
            - '-c'
            - |
              apk update
              apk add iproute2 -y
              POD_IP=$( ip route | grep $DEV | grep default | tr -s ' ' | cut -d ' ' -f 3) && \
              ip route del default via $POD_IP
              ip route add 10.69.0.0/16 via $POD_IP dev $DEV && \
              ip route add 10.96.0.0/16 via $POD_IP dev $DEV && \
              echo -e "\nip route after fix:" && ip route
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
              runAsGroup: 0
              allowPrivilegeEscalation: true
              capabilities:
                add:
                - NET_ADMIN
        containers:
          app:
            image:
              repository: docker.io/mbentley/omada-controller
              tag: 5.15@sha256:e6e08b7afeda68914c2ad895396add70843c2a7feabf93f10768e2d45787a972
            env:
              MANAGE_HTTP_PORT: &manage-http "8088"
              MANAGE_HTTPS_PORT: &manage-https "8043"
              PORTAL_HTTP_PORT: &portal-http "8088"
              PORTAL_HTTPS_PORT: &portal-https "8843"
              PORT_APP_DISCOVERY: &app-discovery "27001"
              PORT_OLT: &old "19810"
              PORT_DISCOVERY: &discovery "29810"
              PORT_MANAGER_V1: &manager-v1 "29811"
              PORT_ADOPT_V1: &adopt-v1 "29812"
              PORT_UPGRADE_V1: &upgrade-v1 "29813"
              PORT_MANAGER_V2: &manager-v2 "29814"
              PORT_TRANSFER_V2: &transfer-v2 "29815"
              PORT_RTTY: &rtty "29816"
              TZ: America/New_York
            # probes:
            #   liveness: &probes
            #     enabled: true
            #     custom: true
            #     spec:
            #       httpGet:
            #         path: /ping
            #         port: *port
            #       initialDelaySeconds: 0
            #       periodSeconds: 10
            #       timeoutSeconds: 1
            #       failureThreshold: 3
            #   readiness: *probes
            securityContext: {}
              # allowPrivilegeEscalation: true
              # readOnlyRootFilesystem: false
              # capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 4Gi
    defaultPodOptions:
      annotations:
        k8s.v1.cni.cncf.io/networks: kube-system/mgmt-bridge
      securityContext: {}
        # runAsNonRoot: false
        # runAsUser: 508
        # runAsGroup: 508
        # fsGroup: 508
        # fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        controller: omada
        ports:
          http:
            primary: true
            port: *manage-http
    route:
      app:
        # kind: TLSRoute # Need TLS to backend
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *manage-http
    persistence:
      data:
        existingClaim: omada
        globalMounts:
          - path: /opt/tplink/EAPController/data
